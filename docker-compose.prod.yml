version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: arp_postgres_prod
    environment:
      POSTGRES_DB: arp_db
      POSTGRES_USER: arp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - arp_network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: arp_backend_prod
    environment:
      - DATABASE_URL=postgresql://arp_user:${POSTGRES_PASSWORD}@postgres:5432/arp_db
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - API_V1_STR=/api/v1
      - PROJECT_NAME=ARP Backend
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - arp_network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: arp_frontend_prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - arp_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: arp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - arp_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  arp_network:
    driver: bridge 